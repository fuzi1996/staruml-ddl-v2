{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/universalModuleDefinition","/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/sqlite.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/index.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/global.js","/Users/taozhi/learning/node-sql-parser/node_modules/big-integer/BigInteger.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_OPT","database","PARSER_NAME","type","parserOpt","commonOptionConnector","keyword","action","opt","toUpperCase","connector","str","createValueExpr","Array","isArray","map","Error","createBinaryExpr","operator","left","right","expr","escape","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","toLowerCase","identifierToSql","isDual","commonTypeValue","result","push","toUpper","val","hasVal","literalToSQL","literal","parentheses","suffix","collate","join","replaceParams","ast","params","replaceParamsInner","keys","filter","forEach","JSON","parse","stringify","onPartitionsToSQL","partitions","partition","start","end","symbol","arrayStructTypeToSQL","dataType","definition","anglebracket","dataTypeUpper","field","field_name","field_type","commentToSQL","comment","triggerEventToSQL","events","event","kw","args","kwArgs","columns","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","arrayStructValueToSQL","exprList","expr_list","columnsToSQL","arrayPath","array_path","brackets","col","exprToSQL","arrayExprListToSQL","arrayStructExprToSQL","length","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","over","orderby","fnName","overStr","overToSQL","distinct","orderOrPartitionByToSQL","window_func","windowFuncToSQL","assign","leftVar","rightVal","extract","extractFunToSQL","binary_expr","rstr","isBetween","case","res","conditions","len","cond","cast","castToSQL","column_ref","function","funcToSQL","interval","intervalExpr","unit","show","showToSQL","struct","namedWindowExprListToSQL","exprOrigin","Reflect","deleteProperty","getExprListSQL","expressions","upperPrefix","info","members","varName","select","_next","unionToSQL","selectToSQL","unary_expr","tableToSQL","tableInfo","table","db","as","tableName","tablesToSQL","tables","unnestExpr","withOffset","with_offset","unnestToSQL","baseTable","clauses","joinExpr","on","using","tableOptionToSQL","tableOption","sql","arrow","column","columnDataType","scale","columnReferenceDefinitionToSQL","referenceDefinition","reference","match","onDelete","on_delete","onUpdate","on_update","columnOrder","nulls","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","reference_definition","constraintDefinitionToSQL","columnOption","getDual","star","columnsStr","columnToSQL","composePrefixValSuffix","stmt","limitToSQL","limit","fetch","offset","seperator","limitOffsetToSQL","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","indexDefinitionToSQL","indexSQL","index","target","expression","alias","symbolChar","castType","cast_type","source","setToSQL","sets","set","setItem","valuesToSQL","values","partitionToSQL","partitionArr","commonCmdToSQL","options","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","typeToSQLFn","alterToSQL","analyze","attach","schema","createToSQL","delete","from","where","columnInfo","addition","update","insert","onDuplicateUpdate","on_duplicate_update","duplicateSet","drop","truncate","declare","dec","at","declareInfo","createDefinitionToSQL","use","rename","renameInfo","storeProcessCall","desc","lock","unlock","fun","_orderby","_limit","unionKeyword","union","bigQueryToSQL","withExpr","withToSQL","multipleToSQL","astInfo","createDefinition","create_definitions","ifNotExists","if_not_exists","resource","asWindowSpec","as_window_specification","partitionby","windowSQL","asWindowSpecToSQL","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","forUpdate","for_update","groupby","having","parentheses_symbol","top","windowInfo","withInfo","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTable","likeTableName","createTableToSQL","constraint","constraintKw","constraint_kw","deferrable","execute","for_each","location","when","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","windowSpec","window_specification","windowFrame","window_frame_clause","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","namedWindowExprInfo","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","constructArgsList","constraintDefinition","enforced","constraintSQL","isRecursive","recursive","withExprStr","cte","showExpr","showEventExpr","inClause","showCharacterSetExpr","op","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","surportedTypes","checkSupported","includes","toSQL","Parser","this","astToSQL","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","test","tableList","columnList","BigInt","peg$SyntaxError","message","expected","found","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","replace","j","descriptions","sort","slice","describeExpected","describeFound","SyntaxError","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","tail","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c40","peg$c45","unshift","tableAlias","columnListTableAlias","clear","add","refreshColumnList","peg$c66","peg$c68","peg$c70","peg$c72","peg$c74","peg$c77","peg$c79","peg$c94","createBinaryExprChain","peg$c96","peg$c98","peg$c102","nk","peg$c105","peg$c107","peg$c109","peg$c111","peg$c113","peg$c115","peg$c123","peg$c125","peg$c128","peg$c130","peg$c132","peg$c141","reservedMap","peg$c145","peg$c146","peg$c147","peg$classExpectation","peg$c148","chars","peg$c150","peg$c151","peg$c152","peg$c154","peg$c155","peg$c156","peg$c159","peg$c160","peg$c161","peg$c162","peg$c163","peg$c164","peg$c165","peg$c167","peg$c176","bc","peg$c179","peg$c181","peg$c183","peg$c185","peg$c187","peg$c189","peg$c191","peg$c193","peg$c195","peg$c197","peg$c199","peg$c201","peg$c203","peg$c205","peg$c207","peg$c209","peg$c211","peg$c213","peg$c215","peg$c217","peg$c219","peg$c231","peg$c234","ca","peg$c237","peg$c239","peg$c240","peg$c241","peg$c242","peg$c244","peg$c247","peg$c250","peg$c253","peg$c256","peg$c259","peg$c262","peg$c265","peg$c268","peg$c271","peg$c274","peg$c275","peg$c276","peg$c285","peg$c289","peg$c290","peg$c291","peg$c292","peg$c293","peg$c294","peg$c295","peg$c296","peg$c299","peg$c305","peg$c309","peg$c316","peg$c326","peg$c331","peg$c348","peg$c350","peg$c352","peg$c354","peg$c356","peg$c358","peg$c360","peg$c362","peg$c364","peg$c366","peg$c368","peg$c373","peg$c375","peg$c377","peg$c379","peg$c381","peg$c383","peg$c385","peg$c387","peg$c389","peg$c391","peg$c394","peg$c397","peg$c400","peg$c403","peg$c406","peg$c409","peg$c412","peg$c415","peg$c418","peg$c421","peg$c424","peg$c427","peg$c430","peg$c433","peg$c436","peg$c439","peg$c442","peg$c445","peg$c451","peg$c453","peg$c455","peg$c457","peg$c459","peg$c461","peg$c463","peg$c466","peg$c469","peg$c475","peg$c481","peg$c484","peg$c487","peg$c490","peg$c493","peg$c499","peg$c508","peg$c511","peg$c532","peg$c538","peg$c541","peg$c544","peg$c547","peg$c556","peg$c562","peg$c571","peg$c574","peg$c619","peg$c621","peg$c623","peg$c625","peg$c627","peg$c629","peg$c631","peg$c633","peg$c635","peg$c637","peg$c638","peg$c639","peg$c640","peg$c644","peg$c646","peg$currPos","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","peg$c1","peg$parsemultiple_stmt","s9","s8","peg$parseKW_WITH","peg$parsecte_definition","peg$parseCOMMA","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","substr","peg$parseident_start","peg$parseKW_LIMIT","peg$parsenumber_or_param","peg$parseKW_OFFSET","i1","peg$c83","peg$parselimit_clause","with","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","peg$c15","s11","s13","s15","s17","s19","peg$parseKW_SELECT","peg$parse___","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parseLPAREN","peg$parseexpr","peg$parseRPAREN","peg$parsealias_clause","peg$parsewith_offset","peg$parsetable_base","peg$parsetable_ref","peg$parsetable_ref_list","peg$parsefrom_clause","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parseparentheses_or_expr","peg$parseKW_AND","peg$parseKW_OR","peg$parseor_and_where_expr","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","peg$c19","peg$parseselect_stmt_nake","peg$parseident_name","peg$parseSTAR","peg$parsecolumns_list","peg$parsecolumn_list_item","tbl","pro","peg$parseident","peg$parseDOT","peg$parseLBRAKE","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parsecolumn_offset_expr","peg$parseexpr_alias","peg$c143","peg$parsequoted_ident","peg$parsealias_ident","s10","s12","s14","peg$parsejoin_op","peg$parseKW_USING","peg$parseon_clause","peg$c48","peg$c49","peg$parsetable_join","peg$parsetable_name","peg$c51","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","peg$parseKW_CROSS","project","dt","obj","peg$c56","peg$c57","peg$parseKW_ON","peg$parseas_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","e","peg$parsewindow_frame_clause","peg$parsewindow_specification","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","peg$c82","peg$parseparam","el","peg$c84","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parseor_expr","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","peg$c86","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$c87","peg$parsearray_expr","rt","lf","peg$c92","peg$parseand_expr","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","peg$parseliteral_string","peg$c121","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c117","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","peg$parsecolumn_ref","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseKW_CAST","peg$parsedata_type","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c223","peg$c224","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c225","peg$parsecast_expr","peg$parseKW_COUNT","peg$parsestar_expr","peg$parsecount_arg","peg$parseover_partition","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseaggr_func","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","peg$c221","peg$parseextract_func","peg$c177","peg$parseproc_func_name","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parsescalar_func","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then","peg$parseKW_ELSE","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","peg$parseinterval_expr","peg$parseKW_WHEN","peg$parseKW_THEN","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c140","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$c235","up","peg$parseliteral_datetime","peg$c233","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c279","exp","peg$c280","peg$c281","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","peg$c643","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","split","global","NodeSQLParser","util","Function","BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","compareAbs","createArray","x","ceil","b","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","negate","abs","comparison","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","part","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","ac","bd","abcd","times","_multiplyBySmall","divmod","pow","_0","_1","_2","isNegative","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","or","xor","roughLOB","min","gcd","integerLogarithm","tmp","absBase","alphabetValues","digits","parseBaseFromArray","toBase","apply","valueOf","neg","out","digit","toBaseString","parseStringValue","decimalPlace","indexOf","parseNumberValue","toArray","toJSON","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","fromArray","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"bigquery.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, value } = opt\n  result.push(type.toUpperCase())\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  extract     : extractFunToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(expr) {\n  const str = `${expr.operator} ${exprToSQL(expr.expr)}`\n  return expr.parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) str = `DISTINCT ${str}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  return [`${fnName}(${str})`, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { identifierToSql, hasVal, commonOptionConnector, toUpper } from './util'\nimport { exprToSQL } from './expr'\n\nfunction tableToSQL(tableInfo) {\n  const { table, db, as, expr } = tableInfo\n  const database = identifierToSql(db)\n  const tableName = table ? identifierToSql(table) : exprToSQL(expr)\n  const str = database ? `${database}.${tableName}` : tableName\n  if (as) return `${str} AS ${identifierToSql(as)}`\n  return str\n}\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [toUpper(type), `(${expr && exprToSQL(expr) || ' '})`, commonOptionConnector('AS', identifierToSql, as), commonOptionConnector(toUpper(withOffset && withOffset.keyword), identifierToSql, withOffset && withOffset.as)]\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const { type } = tables\n  if (toUpper(type) === 'UNNEST') return unnestToSQL(tables)\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnRefToSQL(expr) {\n  const {\n    arrow, as, collate, column, isDual, table, parentheses, property,\n  } = expr\n  let str = column === '*' ? '*' : identifierToSql(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length) result += `(${[length, scale].filter(hasVal).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (column.as.match(/^[a-z_][0-9a-z_]*$/i)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction castToSQL(expr) {\n  const { target, expr: expression, symbol, as: alias } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  return `${prefix}${symbolChar}${dataType}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  if (!args) return name\n  const { parentheses, over } = expr\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  const overStr = overToSQL(over)\n  return [parentheses ? `(${str})` : str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL, toUpper } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value, keyword } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    if (keyword) setItem[2] = `${toUpper(keyword)}(${val})`\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = ['INSERT', toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { columnDefinitionToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  const {\n    action, create_definitions: createDefinition, if_not_exists: ifNotExists,keyword, resource, symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    default:\n      break\n  }\n  const alterArray = [toUpper(action), toUpper(keyword), toUpper(ifNotExists), name, dataType.filter(hasVal).join(' ')]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const {\n    as_window_specification: asWindowSpec,\n    orderby,\n    partitionby,\n    type,\n  } = over\n  if (toUpper(type) === 'WINDOW') {\n    const windowSQL = asWindowSpecToSQL(asWindowSpec)\n    return `OVER ${windowSQL}`\n  }\n  const partition = orderOrPartitionByToSQL(partitionby, 'partition by')\n  const order = orderOrPartitionByToSQL(orderby, 'order by')\n  return `OVER (${[partition, order].filter(hasVal).join(' ')})`\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinct, columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns,\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (fnName) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { exprToSQL } from './expr'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${name}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nexport default function toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n            return { name, stmt };\n          },\n      peg$c19 = function(sv, d, c, f, fs, w, g, h, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                groupby: g,\n                having: h,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, l) {\n          return `${n}[offset(${l.value})]`\n        },\n      peg$c37 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`);\n            if (pro) tbl = `${tbl}.${pro[0]}`\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c38 = function(i) { return i; },\n      peg$c39 = \"unnest\",\n      peg$c40 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c41 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c42 = function(l) { return l; },\n      peg$c43 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c44 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c45 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c46 = function(t) { return t; },\n      peg$c47 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c48 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c49 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c50 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c51 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c52 = function() { return 'LEFT JOIN'; },\n      peg$c53 = function() { return 'RIGHT JOIN'; },\n      peg$c54 = function() { return 'FULL JOIN'; },\n      peg$c55 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c56 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c57 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c58 = function(e) { return e; },\n      peg$c59 = function(e) { return e.value; },\n      peg$c60 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c61 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c62 = function(n) { return n },\n      peg$c63 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c64 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c65 = \"range\",\n      peg$c66 = peg$literalExpectation(\"RANGE\", true),\n      peg$c67 = \"unbounded\",\n      peg$c68 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c69 = \"preceding\",\n      peg$c70 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c71 = \"current\",\n      peg$c72 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c73 = \"ROW\",\n      peg$c74 = peg$literalExpectation(\"ROW\", false),\n      peg$c75 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c76 = \"rows\",\n      peg$c77 = peg$literalExpectation(\"ROWS\", true),\n      peg$c78 = \"following\",\n      peg$c79 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c80 = function(s, e) {\n          return `rows between ${s.value} preceding and ${e.value} following`\n        },\n      peg$c81 = function(bc) { return bc; },\n      peg$c82 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c83 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c84 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c85 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c86 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c87 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c88 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c89 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c90 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c91 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n      },\n      peg$c92 = function(lf, head, rt) { if ((lf && !rt) || (!lf && rt)) return true },\n      peg$c93 = function(lf, head, rt) {\n        if (lf && rt) head.parentheses = true\n        return head\n      },\n      peg$c94 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c95 = \"!\",\n      peg$c96 = peg$literalExpectation(\"!\", false),\n      peg$c97 = \"=\",\n      peg$c98 = peg$literalExpectation(\"=\", false),\n      peg$c99 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c100 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c101 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c102 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c103 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c104 = \">=\",\n      peg$c105 = peg$literalExpectation(\">=\", false),\n      peg$c106 = \">\",\n      peg$c107 = peg$literalExpectation(\">\", false),\n      peg$c108 = \"<=\",\n      peg$c109 = peg$literalExpectation(\"<=\", false),\n      peg$c110 = \"<>\",\n      peg$c111 = peg$literalExpectation(\"<>\", false),\n      peg$c112 = \"<\",\n      peg$c113 = peg$literalExpectation(\"<\", false),\n      peg$c114 = \"!=\",\n      peg$c115 = peg$literalExpectation(\"!=\", false),\n      peg$c116 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c117 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c118 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c119 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c120 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c121 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c122 = \"+\",\n      peg$c123 = peg$literalExpectation(\"+\", false),\n      peg$c124 = \"-\",\n      peg$c125 = peg$literalExpectation(\"-\", false),\n      peg$c126 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c127 = \"*\",\n      peg$c128 = peg$literalExpectation(\"*\", false),\n      peg$c129 = \"/\",\n      peg$c130 = peg$literalExpectation(\"/\", false),\n      peg$c131 = \"%\",\n      peg$c132 = peg$literalExpectation(\"%\", false),\n      peg$c133 = function(e, tail) {\n            e.parentheses = true;\n            if (!tail || tail.length === 0) return e\n            return createBinaryExprChain(e, tail);\n          },\n      peg$c134 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c135 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c136 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr || null,\n              args: condition_list\n            };\n          },\n      peg$c137 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c138 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c139 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c140 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c141 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c142 = function(name) {\n            return name;\n          },\n      peg$c143 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c144 = \"\\\"\",\n      peg$c145 = peg$literalExpectation(\"\\\"\", false),\n      peg$c146 = /^[^\"]/,\n      peg$c147 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c148 = function(chars) { return chars.join(''); },\n      peg$c149 = \"'\",\n      peg$c150 = peg$literalExpectation(\"'\", false),\n      peg$c151 = /^[^']/,\n      peg$c152 = peg$classExpectation([\"'\"], true, false),\n      peg$c153 = \"`\",\n      peg$c154 = peg$literalExpectation(\"`\", false),\n      peg$c155 = /^[^`]/,\n      peg$c156 = peg$classExpectation([\"`\"], true, false),\n      peg$c157 = function(name) {\n          return name;\n        },\n      peg$c158 = function(name) { return name; },\n      peg$c159 = function(start, parts) { return start + parts.join(''); },\n      peg$c160 = /^[A-Za-z_]/,\n      peg$c161 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c162 = /^[A-Za-z0-9_]/,\n      peg$c163 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c164 = /^[A-Za-z0-9_:]/,\n      peg$c165 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c166 = \":\",\n      peg$c167 = peg$literalExpectation(\":\", false),\n      peg$c168 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c169 = function(name, e) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              }\n            };\n          },\n      peg$c170 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c171 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c172 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c173 = function(e) { return { expr: e }; },\n      peg$c174 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c175 = function() { return { type: 'star', value: '*' }; },\n      peg$c176 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c177 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c178 = \"century\",\n      peg$c179 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c180 = \"day\",\n      peg$c181 = peg$literalExpectation(\"DAY\", true),\n      peg$c182 = \"decade\",\n      peg$c183 = peg$literalExpectation(\"DECADE\", true),\n      peg$c184 = \"dow\",\n      peg$c185 = peg$literalExpectation(\"DOW\", true),\n      peg$c186 = \"doy\",\n      peg$c187 = peg$literalExpectation(\"DOY\", true),\n      peg$c188 = \"epoch\",\n      peg$c189 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c190 = \"hour\",\n      peg$c191 = peg$literalExpectation(\"HOUR\", true),\n      peg$c192 = \"isodow\",\n      peg$c193 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c194 = \"isoyear\",\n      peg$c195 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c196 = \"microseconds\",\n      peg$c197 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c198 = \"millennium\",\n      peg$c199 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c200 = \"milliseconds\",\n      peg$c201 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c202 = \"minute\",\n      peg$c203 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c204 = \"month\",\n      peg$c205 = peg$literalExpectation(\"MONTH\", true),\n      peg$c206 = \"quarter\",\n      peg$c207 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c208 = \"second\",\n      peg$c209 = peg$literalExpectation(\"SECOND\", true),\n      peg$c210 = \"timezone\",\n      peg$c211 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c212 = \"timezone_hour\",\n      peg$c213 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c214 = \"timezone_minute\",\n      peg$c215 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c216 = \"week\",\n      peg$c217 = peg$literalExpectation(\"WEEK\", true),\n      peg$c218 = \"year\",\n      peg$c219 = peg$literalExpectation(\"YEAR\", true),\n      peg$c220 = function() {\n          return f\n        },\n      peg$c221 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c222 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c223 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c224 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c225 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c226 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c227 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c228 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c229 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c230 = \"r\",\n      peg$c231 = peg$literalExpectation(\"R\", true),\n      peg$c232 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c233 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c234 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c235 = function(type, lf, rt) { if (lf && rt) return true },\n      peg$c236 = \"on update current_timestamp\",\n      peg$c237 = peg$literalExpectation(\"ON UPDATE CURRENT_TIMESTAMP\", true),\n      peg$c238 = function(type, lf, rt, up) {\n            return {\n              type: 'origin',\n              value: (up ? `${type} ${up}` : type).toLowerCase()\n            };\n          },\n      peg$c239 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c240 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c241 = /^[^'\\\\]/,\n      peg$c242 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c243 = \"\\\\'\",\n      peg$c244 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c245 = function() { return \"'\";  },\n      peg$c246 = \"\\\\\\\"\",\n      peg$c247 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c248 = function() { return '\"';  },\n      peg$c249 = \"\\\\\\\\\",\n      peg$c250 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c251 = function() { return \"\\\\\"; },\n      peg$c252 = \"\\\\/\",\n      peg$c253 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c254 = function() { return \"/\";  },\n      peg$c255 = \"\\\\b\",\n      peg$c256 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c257 = function() { return \"\\b\"; },\n      peg$c258 = \"\\\\f\",\n      peg$c259 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c260 = function() { return \"\\f\"; },\n      peg$c261 = \"\\\\n\",\n      peg$c262 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c263 = function() { return \"\\n\"; },\n      peg$c264 = \"\\\\r\",\n      peg$c265 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c266 = function() { return \"\\r\"; },\n      peg$c267 = \"\\\\t\",\n      peg$c268 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c269 = function() { return \"\\t\"; },\n      peg$c270 = \"\\\\u\",\n      peg$c271 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c272 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c273 = \"\\\\\",\n      peg$c274 = peg$literalExpectation(\"\\\\\", false),\n      peg$c275 = /^[\\n\\r]/,\n      peg$c276 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c277 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c278 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c279 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c280 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c281 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c282 = function(op, digits) { return \"-\" + digits; },\n      peg$c283 = function(op, digit) { return \"-\" + digit; },\n      peg$c284 = \".\",\n      peg$c285 = peg$literalExpectation(\".\", false),\n      peg$c286 = function(digits) { return \".\" + digits; },\n      peg$c287 = function(e, digits) { return e + digits; },\n      peg$c288 = function(digits) { return digits.join(\"\"); },\n      peg$c289 = /^[0-9]/,\n      peg$c290 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c291 = /^[0-9a-fA-F]/,\n      peg$c292 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c293 = /^[eE]/,\n      peg$c294 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c295 = /^[+\\-]/,\n      peg$c296 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c297 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c298 = \"null\",\n      peg$c299 = peg$literalExpectation(\"NULL\", true),\n      peg$c300 = \"default\",\n      peg$c301 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c302 = \"not null\",\n      peg$c303 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c304 = \"true\",\n      peg$c305 = peg$literalExpectation(\"TRUE\", true),\n      peg$c306 = \"to\",\n      peg$c307 = peg$literalExpectation(\"TO\", true),\n      peg$c308 = \"false\",\n      peg$c309 = peg$literalExpectation(\"FALSE\", true),\n      peg$c310 = \"drop\",\n      peg$c311 = peg$literalExpectation(\"DROP\", true),\n      peg$c312 = function() { return 'DROP'; },\n      peg$c313 = \"use\",\n      peg$c314 = peg$literalExpectation(\"USE\", true),\n      peg$c315 = \"select\",\n      peg$c316 = peg$literalExpectation(\"SELECT\", true),\n      peg$c317 = \"if not exists\",\n      peg$c318 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c319 = \"RECURSIVE\",\n      peg$c320 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c321 = \"ignore\",\n      peg$c322 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c323 = \"explain\",\n      peg$c324 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c325 = \"partition\",\n      peg$c326 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c327 = function() { return 'PARTITION' },\n      peg$c328 = \"into\",\n      peg$c329 = peg$literalExpectation(\"INTO\", true),\n      peg$c330 = \"from\",\n      peg$c331 = peg$literalExpectation(\"FROM\", true),\n      peg$c332 = \"set\",\n      peg$c333 = peg$literalExpectation(\"SET\", true),\n      peg$c334 = \"unlock\",\n      peg$c335 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c336 = \"lock\",\n      peg$c337 = peg$literalExpectation(\"LOCK\", true),\n      peg$c338 = \"table\",\n      peg$c339 = peg$literalExpectation(\"TABLE\", true),\n      peg$c340 = function() { return 'TABLE'; },\n      peg$c341 = \"tables\",\n      peg$c342 = peg$literalExpectation(\"TABLES\", true),\n      peg$c343 = function() { return 'TABLES'; },\n      peg$c344 = \"collate\",\n      peg$c345 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c346 = function() { return 'COLLATE'; },\n      peg$c347 = \"on\",\n      peg$c348 = peg$literalExpectation(\"ON\", true),\n      peg$c349 = \"left\",\n      peg$c350 = peg$literalExpectation(\"LEFT\", true),\n      peg$c351 = \"right\",\n      peg$c352 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c353 = \"full\",\n      peg$c354 = peg$literalExpectation(\"FULL\", true),\n      peg$c355 = \"inner\",\n      peg$c356 = peg$literalExpectation(\"INNER\", true),\n      peg$c357 = \"cross\",\n      peg$c358 = peg$literalExpectation(\"CROSS\", true),\n      peg$c359 = \"join\",\n      peg$c360 = peg$literalExpectation(\"JOIN\", true),\n      peg$c361 = \"outer\",\n      peg$c362 = peg$literalExpectation(\"OUTER\", true),\n      peg$c363 = \"over\",\n      peg$c364 = peg$literalExpectation(\"OVER\", true),\n      peg$c365 = \"union\",\n      peg$c366 = peg$literalExpectation(\"UNION\", true),\n      peg$c367 = \"value\",\n      peg$c368 = peg$literalExpectation(\"VALUE\", true),\n      peg$c369 = function() { return 'VALUE' },\n      peg$c370 = \"values\",\n      peg$c371 = peg$literalExpectation(\"VALUES\", true),\n      peg$c372 = \"using\",\n      peg$c373 = peg$literalExpectation(\"USING\", true),\n      peg$c374 = \"where\",\n      peg$c375 = peg$literalExpectation(\"WHERE\", true),\n      peg$c376 = \"with\",\n      peg$c377 = peg$literalExpectation(\"WITH\", true),\n      peg$c378 = \"group\",\n      peg$c379 = peg$literalExpectation(\"GROUP\", true),\n      peg$c380 = \"by\",\n      peg$c381 = peg$literalExpectation(\"BY\", true),\n      peg$c382 = \"order\",\n      peg$c383 = peg$literalExpectation(\"ORDER\", true),\n      peg$c384 = \"having\",\n      peg$c385 = peg$literalExpectation(\"HAVING\", true),\n      peg$c386 = \"window\",\n      peg$c387 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c388 = \"limit\",\n      peg$c389 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c390 = \"offset\",\n      peg$c391 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c392 = function() { return 'OFFSET'; },\n      peg$c393 = \"asc\",\n      peg$c394 = peg$literalExpectation(\"ASC\", true),\n      peg$c395 = function() { return 'ASC'; },\n      peg$c396 = \"desc\",\n      peg$c397 = peg$literalExpectation(\"DESC\", true),\n      peg$c398 = function() { return 'DESC'; },\n      peg$c399 = \"all\",\n      peg$c400 = peg$literalExpectation(\"ALL\", true),\n      peg$c401 = function() { return 'ALL'; },\n      peg$c402 = \"distinct\",\n      peg$c403 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c404 = function() { return 'DISTINCT';},\n      peg$c405 = \"between\",\n      peg$c406 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c407 = function() { return 'BETWEEN'; },\n      peg$c408 = \"in\",\n      peg$c409 = peg$literalExpectation(\"IN\", true),\n      peg$c410 = function() { return 'IN'; },\n      peg$c411 = \"is\",\n      peg$c412 = peg$literalExpectation(\"IS\", true),\n      peg$c413 = function() { return 'IS'; },\n      peg$c414 = \"like\",\n      peg$c415 = peg$literalExpectation(\"LIKE\", true),\n      peg$c416 = function() { return 'LIKE'; },\n      peg$c417 = \"exists\",\n      peg$c418 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c419 = function() { return 'EXISTS'; },\n      peg$c420 = \"not\",\n      peg$c421 = peg$literalExpectation(\"NOT\", true),\n      peg$c422 = function() { return 'NOT'; },\n      peg$c423 = \"and\",\n      peg$c424 = peg$literalExpectation(\"AND\", true),\n      peg$c425 = function() { return 'AND'; },\n      peg$c426 = \"or\",\n      peg$c427 = peg$literalExpectation(\"OR\", true),\n      peg$c428 = function() { return 'OR'; },\n      peg$c429 = \"count\",\n      peg$c430 = peg$literalExpectation(\"COUNT\", true),\n      peg$c431 = function() { return 'COUNT'; },\n      peg$c432 = \"max\",\n      peg$c433 = peg$literalExpectation(\"MAX\", true),\n      peg$c434 = function() { return 'MAX'; },\n      peg$c435 = \"min\",\n      peg$c436 = peg$literalExpectation(\"MIN\", true),\n      peg$c437 = function() { return 'MIN'; },\n      peg$c438 = \"sum\",\n      peg$c439 = peg$literalExpectation(\"SUM\", true),\n      peg$c440 = function() { return 'SUM'; },\n      peg$c441 = \"avg\",\n      peg$c442 = peg$literalExpectation(\"AVG\", true),\n      peg$c443 = function() { return 'AVG'; },\n      peg$c444 = \"extract\",\n      peg$c445 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c446 = function() { return 'EXTRACT'; },\n      peg$c447 = \"call\",\n      peg$c448 = peg$literalExpectation(\"CALL\", true),\n      peg$c449 = function() { return 'CALL'; },\n      peg$c450 = \"case\",\n      peg$c451 = peg$literalExpectation(\"CASE\", true),\n      peg$c452 = \"when\",\n      peg$c453 = peg$literalExpectation(\"WHEN\", true),\n      peg$c454 = \"then\",\n      peg$c455 = peg$literalExpectation(\"THEN\", true),\n      peg$c456 = \"else\",\n      peg$c457 = peg$literalExpectation(\"ELSE\", true),\n      peg$c458 = \"end\",\n      peg$c459 = peg$literalExpectation(\"END\", true),\n      peg$c460 = \"cast\",\n      peg$c461 = peg$literalExpectation(\"CAST\", true),\n      peg$c462 = \"array\",\n      peg$c463 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c464 = function() { return 'ARRAY'; },\n      peg$c465 = \"bytes\",\n      peg$c466 = peg$literalExpectation(\"BYTES\", true),\n      peg$c467 = function() { return 'BYTES'; },\n      peg$c468 = \"bool\",\n      peg$c469 = peg$literalExpectation(\"BOOL\", true),\n      peg$c470 = function() { return 'BOOL'; },\n      peg$c471 = \"char\",\n      peg$c472 = peg$literalExpectation(\"CHAR\", true),\n      peg$c473 = function() { return 'CHAR'; },\n      peg$c474 = \"geography\",\n      peg$c475 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c476 = function() { return 'GEOGRAPHY'; },\n      peg$c477 = \"varchar\",\n      peg$c478 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c479 = function() { return 'VARCHAR';},\n      peg$c480 = \"numeric\",\n      peg$c481 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c482 = function() { return 'NUMERIC'; },\n      peg$c483 = \"decimal\",\n      peg$c484 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c485 = function() { return 'DECIMAL'; },\n      peg$c486 = \"signed\",\n      peg$c487 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c488 = function() { return 'SIGNED'; },\n      peg$c489 = \"unsigned\",\n      peg$c490 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c491 = function() { return 'UNSIGNED'; },\n      peg$c492 = \"int64\",\n      peg$c493 = peg$literalExpectation(\"INT64\", true),\n      peg$c494 = function() { return 'INT64'; },\n      peg$c495 = \"zerofill\",\n      peg$c496 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c497 = function() { return 'ZEROFILL'; },\n      peg$c498 = \"integer\",\n      peg$c499 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c500 = function() { return 'INTEGER'; },\n      peg$c501 = \"json\",\n      peg$c502 = peg$literalExpectation(\"JSON\", true),\n      peg$c503 = function() { return 'JSON'; },\n      peg$c504 = \"smallint\",\n      peg$c505 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c506 = function() { return 'SMALLINT'; },\n      peg$c507 = \"string\",\n      peg$c508 = peg$literalExpectation(\"STRING\", true),\n      peg$c509 = function() { return 'STRING'; },\n      peg$c510 = \"struct\",\n      peg$c511 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c512 = function() { return 'STRUCT'; },\n      peg$c513 = \"tinyint\",\n      peg$c514 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c515 = function() { return 'TINYINT'; },\n      peg$c516 = \"tinytext\",\n      peg$c517 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c518 = function() { return 'TINYTEXT'; },\n      peg$c519 = \"text\",\n      peg$c520 = peg$literalExpectation(\"TEXT\", true),\n      peg$c521 = function() { return 'TEXT'; },\n      peg$c522 = \"mediumtext\",\n      peg$c523 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c524 = function() { return 'MEDIUMTEXT'; },\n      peg$c525 = \"longtext\",\n      peg$c526 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c527 = function() { return 'LONGTEXT'; },\n      peg$c528 = \"bigint\",\n      peg$c529 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c530 = function() { return 'BIGINT'; },\n      peg$c531 = \"float64\",\n      peg$c532 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c533 = function() { return 'FLOAT64'; },\n      peg$c534 = \"double\",\n      peg$c535 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c536 = function() { return 'DOUBLE'; },\n      peg$c537 = \"date\",\n      peg$c538 = peg$literalExpectation(\"DATE\", true),\n      peg$c539 = function() { return 'DATE'; },\n      peg$c540 = \"datetime\",\n      peg$c541 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c542 = function() { return 'DATETIME'; },\n      peg$c543 = \"time\",\n      peg$c544 = peg$literalExpectation(\"TIME\", true),\n      peg$c545 = function() { return 'TIME'; },\n      peg$c546 = \"timestamp\",\n      peg$c547 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c548 = function() { return 'TIMESTAMP'; },\n      peg$c549 = \"truncate\",\n      peg$c550 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c551 = function() { return 'TRUNCATE'; },\n      peg$c552 = \"user\",\n      peg$c553 = peg$literalExpectation(\"USER\", true),\n      peg$c554 = function() { return 'USER'; },\n      peg$c555 = \"current_date\",\n      peg$c556 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c557 = function() { return 'CURRENT_DATE'; },\n      peg$c558 = \"adddate\",\n      peg$c559 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c560 = function() { return 'ADDDATE'; },\n      peg$c561 = \"interval\",\n      peg$c562 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c563 = function() { return 'INTERVAL'; },\n      peg$c564 = function() { return 'YEAR'; },\n      peg$c565 = function() { return 'MONTH'; },\n      peg$c566 = function() { return 'DAY'; },\n      peg$c567 = function() { return 'HOUR'; },\n      peg$c568 = function() { return 'MINUTE'; },\n      peg$c569 = function() { return 'SECOND'; },\n      peg$c570 = \"current_time\",\n      peg$c571 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c572 = function() { return 'CURRENT_TIME'; },\n      peg$c573 = \"current_timestamp\",\n      peg$c574 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c575 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c576 = \"global\",\n      peg$c577 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c578 = function() { return 'GLOBAL'; },\n      peg$c579 = \"session\",\n      peg$c580 = peg$literalExpectation(\"SESSION\", true),\n      peg$c581 = function() { return 'SESSION'; },\n      peg$c582 = \"local\",\n      peg$c583 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c584 = function() { return 'LOCAL'; },\n      peg$c585 = \"persist\",\n      peg$c586 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c587 = function() { return 'PERSIST'; },\n      peg$c588 = \"persist_only\",\n      peg$c589 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c590 = function() { return 'PERSIST_ONLY'; },\n      peg$c591 = \"add\",\n      peg$c592 = peg$literalExpectation(\"ADD\", true),\n      peg$c593 = function() { return 'ADD'; },\n      peg$c594 = \"column\",\n      peg$c595 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c596 = function() { return 'COLUMN'; },\n      peg$c597 = \"index\",\n      peg$c598 = peg$literalExpectation(\"INDEX\", true),\n      peg$c599 = function() { return 'INDEX'; },\n      peg$c600 = \"key\",\n      peg$c601 = peg$literalExpectation(\"KEY\", true),\n      peg$c602 = function() { return 'KEY'; },\n      peg$c603 = \"fulltext\",\n      peg$c604 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c605 = function() { return 'FULLTEXT'; },\n      peg$c606 = \"unique\",\n      peg$c607 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c608 = function() { return 'UNIQUE'; },\n      peg$c609 = \"comment\",\n      peg$c610 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c611 = function() { return 'COMMENT'; },\n      peg$c612 = \"constraint\",\n      peg$c613 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c614 = function() { return 'CONSTRAINT'; },\n      peg$c615 = \"references\",\n      peg$c616 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c617 = function() { return 'REFERENCES'; },\n      peg$c618 = \",\",\n      peg$c619 = peg$literalExpectation(\",\", false),\n      peg$c620 = \"[\",\n      peg$c621 = peg$literalExpectation(\"[\", false),\n      peg$c622 = \"]\",\n      peg$c623 = peg$literalExpectation(\"]\", false),\n      peg$c624 = \";\",\n      peg$c625 = peg$literalExpectation(\";\", false),\n      peg$c626 = \"||\",\n      peg$c627 = peg$literalExpectation(\"||\", false),\n      peg$c628 = \"&&\",\n      peg$c629 = peg$literalExpectation(\"&&\", false),\n      peg$c630 = \"/*\",\n      peg$c631 = peg$literalExpectation(\"/*\", false),\n      peg$c632 = \"*/\",\n      peg$c633 = peg$literalExpectation(\"*/\", false),\n      peg$c634 = \"--\",\n      peg$c635 = peg$literalExpectation(\"--\", false),\n      peg$c636 = \"#\",\n      peg$c637 = peg$literalExpectation(\"#\", false),\n      peg$c638 = peg$anyExpectation(),\n      peg$c639 = /^[ \\t\\n\\r]/,\n      peg$c640 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c641 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c642 = function(n) {\n            return n\n          },\n      peg$c643 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c644 = function(t) { return { dataType: t }; },\n      peg$c645 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10) }; },\n      peg$c646 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SELECT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse___();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsestruct_value();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ALL();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_DISTINCT();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_clause();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsefor_sys_time_as_of();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhere_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsegroup_by_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsehaving_clause();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsewindow_clause();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c19(s3, s5, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsecolumn_offset_expr();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDOT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSTAR();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_alias();\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c38(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c38(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c39) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewith_offset();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c41(s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FROM();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_ref_list();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c42(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c43(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c45(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c46(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c46(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c47(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c48(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c49(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c50(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c51(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c52();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c53();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c54();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_INNER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_CROSS();\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c55(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c56(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c57(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c59(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c61(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c62(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c63(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c64(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c65) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c66); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c67) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c68); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c70); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c71) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c73) {\n                            s12 = peg$c73;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c75();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c76) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                    s7 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c70); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_AND();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseliteral_numeric();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c78) {\n                                s13 = input.substr(peg$currPos, 9);\n                                peg$currPos += 9;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c79); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c80(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c81(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c42(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c82(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c83(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c84(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseunary_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseor_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselect_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c85(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c86(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c87(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c88(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c89(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c90(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_or_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_or_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_or_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_or_expr() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c92(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c93(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c95;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c96); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c97;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c98); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c99(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c100(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c101(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c104) {\n      s0 = peg$c104;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c105); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c106;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c107); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c108) {\n          s0 = peg$c108;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c109); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c110) {\n            s0 = peg$c110;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c111); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c112;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c113); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c97;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c98); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c114) {\n                  s0 = peg$c114;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c116(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c117(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c118(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c119(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c120(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c121(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c122;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c123); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c124;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c126(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c129;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c130); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c131;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseexpr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              s6 = [];\n                              s7 = peg$currPos;\n                              s8 = peg$parse___();\n                              if (s8 !== peg$FAILED) {\n                                s9 = peg$parseKW_AND();\n                                if (s9 === peg$FAILED) {\n                                  s9 = peg$parseKW_OR();\n                                }\n                                if (s9 !== peg$FAILED) {\n                                  s10 = peg$parse__();\n                                  if (s10 !== peg$FAILED) {\n                                    s11 = peg$parseor_expr();\n                                    if (s11 !== peg$FAILED) {\n                                      s8 = [s8, s9, s10, s11];\n                                      s7 = s8;\n                                    } else {\n                                      peg$currPos = s7;\n                                      s7 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s7;\n                                  s7 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s7;\n                                s7 = peg$FAILED;\n                              }\n                              while (s7 !== peg$FAILED) {\n                                s6.push(s7);\n                                s7 = peg$currPos;\n                                s8 = peg$parse___();\n                                if (s8 !== peg$FAILED) {\n                                  s9 = peg$parseKW_AND();\n                                  if (s9 === peg$FAILED) {\n                                    s9 = peg$parseKW_OR();\n                                  }\n                                  if (s9 !== peg$FAILED) {\n                                    s10 = peg$parse__();\n                                    if (s10 !== peg$FAILED) {\n                                      s11 = peg$parseor_expr();\n                                      if (s11 !== peg$FAILED) {\n                                        s8 = [s8, s9, s10, s11];\n                                        s7 = s8;\n                                      } else {\n                                        peg$currPos = s7;\n                                        s7 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s7;\n                                      s7 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s7;\n                                  s7 = peg$FAILED;\n                                }\n                              }\n                              if (s6 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c133(s3, s6);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      s1 = peg$parseLPAREN();\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parse__();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parseexpr_list();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parse__();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parseRPAREN();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c134(s3);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c135(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsecase_when_then();\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parsecase_when_then();\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecase_else();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_END();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_CASE();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c136(s3, s5, s7);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c137(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c138(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c139(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c140(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c141(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c143(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c144;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c146.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c147); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c146.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c147); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c144;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c145); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c148(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c149;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c150); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c151.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c152); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c151.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c152); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c149;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c148(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c153;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c154); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c155.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c156); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c155.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c156); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c153;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c154); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c148(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c157(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c141(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c158(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c159(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c159(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c160.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c162.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c163); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c164.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c165); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c166;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c167); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c168(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c169(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c170(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c171(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c172(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c173(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c174(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c127;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c175();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr_list();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c176(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c176(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c177(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c178) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c179); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c180) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c181); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c182) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c183); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c184) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c185); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c186) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c187); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c188) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c189); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c190) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c191); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c192) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c193); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c194) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c195); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c196) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c197); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c198) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c199); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c200) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c201); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c202) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c203); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c204) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c205); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c206) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c207); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c208) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c209); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c210) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c211); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c212) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c213); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c214) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c215); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c216) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c217); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c218) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c219); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c220();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c221(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c222(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c223(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c224(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c225(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c226();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c227();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c228();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c229();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c230) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c231); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c149;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c149;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c150); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c232(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c230) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c231); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c144;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c145); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c144;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c145); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c233(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c149;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c149;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c150); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c234(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c144;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c145); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c144;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c145); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c234(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CURRENT_TIMESTAMP();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRPAREN();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s6 = peg$c235(s1, s3, s5);\n                  if (s6) {\n                    s6 = peg$FAILED;\n                  } else {\n                    s6 = void 0;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse__();\n                    if (s7 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 27).toLowerCase() === peg$c236) {\n                        s8 = input.substr(peg$currPos, 27);\n                        peg$currPos += 27;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                      }\n                      if (s8 === peg$FAILED) {\n                        s8 = null;\n                      }\n                      if (s8 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c238(s1, s3, s5, s8);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c239.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c240); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c241.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c242); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c243) {\n      s1 = peg$c243;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c244); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c245();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c246) {\n        s1 = peg$c246;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c247); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c248();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c249) {\n          s1 = peg$c249;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c250); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c251();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c252) {\n            s1 = peg$c252;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c253); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c254();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c255) {\n              s1 = peg$c255;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c256); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c257();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c258) {\n                s1 = peg$c258;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c259); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c260();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c261) {\n                  s1 = peg$c261;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c262); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c263();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c264) {\n                    s1 = peg$c264;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c265); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c266();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c267) {\n                      s1 = peg$c267;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c268); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c269();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c270) {\n                        s1 = peg$c270;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c271); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c272(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c273;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c274); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c251();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c275.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c276); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c277(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c278(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c279(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c280(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c281(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c124;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c125); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c122;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c123); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c282(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c124;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c122;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c123); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c283(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c284;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c285); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c286(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c287(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c288(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c289.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c290); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c291.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c292); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c293.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c294); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c295.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c296); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c297(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c298) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c299); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c300) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c301); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c302) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c303); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c304) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c305); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c306) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c307); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c308) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c309); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c310) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c311); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c312();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c313) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c314); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c315) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c316); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c317) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c318); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c319) {\n      s1 = peg$c319;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c320); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c321) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c322); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c323) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c324); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c325) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c326); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c327();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c328) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c329); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c330) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c331); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c332) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c333); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c334) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c335); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c336) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c337); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c338) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c339); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c340();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c341) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c342); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c343();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c344) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c345); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c346();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c347) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c348); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c349) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c350); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c351) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c352); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c353) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c354); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c357) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c358); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c359) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c360); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c361) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c363) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c364); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c365) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c367) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c368); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c369();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c370) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c371); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c372) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c373); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c374) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c375); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c376) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c377); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c378) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c379); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c380) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c381); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c382) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c383); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c384) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c386) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c387); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c388) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c389); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c390) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c391); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c392();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c393) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c394); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c395();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c396) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c397); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c398();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c399) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c400); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c401();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c402) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c404();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c405) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c406); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c407();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c408) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c409); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c410();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c411) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c412); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c413();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c414) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c415); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c416();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c417) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c418); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c419();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c420) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c421); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c423) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c424); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c426) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c427); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c428();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c429) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c430); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c432) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c433); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c434();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c435) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c437();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c438) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c439); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c440();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c441) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c442); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c443();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c444) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c445); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c446();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c447) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c448); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c449();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c450) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c452) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c453); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c454) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c455); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c456) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c458) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c459); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c460) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c461); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c462) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c463); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c464();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c465) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c466); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c467();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c468) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c469); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c470();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c471) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c472); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c473();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c474) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c475); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c476();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c477) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c478); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c479();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c480) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c481); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c482();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c483) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c484); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c485();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c486) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c487); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c488();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c489) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c490); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c491();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c492) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c493); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c494();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c495) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c496); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c497();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c498) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c499); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c500();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c501) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c502); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c503();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c504) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c505); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c506();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c507) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c508); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c509();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c510) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c511); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c512();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c513) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c514); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c515();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c516) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c517); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c518();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c519) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c520); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c521();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c522) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c523); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c524();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c525) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c526); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c527();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c528) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c529); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c530();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c531) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c532); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c533();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c534) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c535); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c536();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c537) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c538); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c539();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c540) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c541); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c542();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c543) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c544); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c545();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c546) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c547); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c548();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c549) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c550); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c551();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c552) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c553); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c554();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c555) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c556); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c557();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c558) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c559); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c560();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c561) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c562); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c563();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c218) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c219); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c564();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c204) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c205); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c565();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c180) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c181); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c566();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c190) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c191); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c567();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c202) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c203); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c568();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c208) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c209); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c569();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c570) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c571); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c572();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c573) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c574); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c575();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c576) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c577); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c578();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c579) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c580); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c581();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c582) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c583); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c584();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c585) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c586); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c587();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c588) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c589); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c590();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c591) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c592); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c593();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c594) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c595); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c596();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c597) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c598); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c599();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c600) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c602();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c603) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c604); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c605();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c606) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c607); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c608();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c609) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c610); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c611();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c612) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c613); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c614();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c617();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c284;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c285); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c618;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c112;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c106;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c107); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c620;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c621); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c622;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c623); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c624;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c626) {\n      s0 = peg$c626;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c628) {\n      s0 = peg$c628;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c629); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c630) {\n      s1 = peg$c630;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c631); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c632) {\n        s5 = peg$c632;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c633); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c632) {\n          s5 = peg$c632;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c633); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c632) {\n          s3 = peg$c632;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c633); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c634) {\n      s1 = peg$c634;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c635); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c636;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c637); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c638); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c639.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c640); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c275.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c276); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c275.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c276); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c638); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c641(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c642(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c643(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c644(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c644(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c289.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c290); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c289.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c290); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c645(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c644(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c644(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c646(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c646(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}